{"version":3,"sources":["logo.svg","components/ClockUpDown.js","components/Step.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","relaxTimeMilliseconds","React","Component","tenseTimeMilliseconds","Step","_useState","useState","_useState2","Object","slicedToArray","phase","setPhase","_useState3","_useState4","step","setStep","onZero","steps","length","react_default","a","createElement","Fragment","title","description","build","direction","initialTime","checkpoints","time","callback","Seconds","App","className","components_Step","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ggDAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yMCqClCC,GAlCoBC,IAAMC,UAkCF,MCFxBC,EAAwB,IACxBH,EAAwB,KAEfI,EA9BF,WAAM,IAAAC,EACQC,mBAAS,SADjBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACXK,EADWH,EAAA,GACJI,EADIJ,EAAA,GAAAK,EAEMN,mBAAS,GAFfO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEXE,EAFWD,EAAA,GAELE,EAFKF,EAAA,GAGZG,EAAS,WACD,UAAVN,EAAmBC,EAAS,SACvBG,EAAOG,EAAMC,OAAS,IAC7BH,EAAQD,EAAK,GACbH,EAAS,WAUX,OACCQ,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACAH,EAAAC,EAAAC,cAAA,UAAKJ,EAAMH,GAAMS,OACjBJ,EAAAC,EAAAC,cAAA,SAAc,UAAVX,EAAoBO,EAAMH,GAAMU,YAAc,SAElDL,EAAAC,EAAAC,cAXkB,kBAAOF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CACzBC,UAAU,WACVC,YAAsB,UAATjB,EAAmBP,EAAwBH,EACxD4B,YAAa,CAAC,CAACC,KAAM,EAAGC,SAAUd,KAClCG,EAAAC,EAAAC,cAACI,EAAA,EAAMM,QAAP,QAOA,QCFaC,MAvBf,WACE,OACEb,EAAAC,EAAAC,cAAA,OAAKY,UAAU,OACbd,EAAAC,EAAAC,cAAA,2CACAF,EAAAC,EAAAC,cAACa,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b17a1cb5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport Timer from \"react-compound-timer\";\r\n\r\nclass ClockUpDown extends React.Component {\r\n    componentDidMount() {\r\n        const { setCheckpoints, setDirection, setTime, start } = this.props.timer;\r\n\r\n        setCheckpoints([\r\n        //   {\r\n        //       time: 1000,\r\n        //       callback: () => setDirection('forward'),\r\n        //   },\r\n            {\r\n                time: 1000,\r\n                callback: () => {\r\n                    setTime(relaxTimeMilliseconds);\r\n                    console.log(`setting time to ${relaxTimeMilliseconds}`);\r\n                    this.props.onZero();\r\n                },\r\n            },\r\n        ]);\r\n\r\n    // set to 10s after 3s and start\r\n    //   setTimeout(() => {\r\n    //       setTime(10000);\r\n    //       start();\r\n    //   }, 3000);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Timer.Seconds />\r\n        );\r\n    }\r\n}\r\n\r\nconst tenseTimeMilliseconds = 5000;\r\nconst relaxTimeMilliseconds = 16000;\r\n\r\nexport default ClockUpDown;","import React, {useState} from 'react';\r\nimport Timer from \"react-compound-timer\";\r\nimport steps from \"../data/steps-anxiety-canada.json\";\r\nimport ClockUpDown from \"./ClockUpDown\";\r\nimport withTimer from \"../hooks/withTimer\";\r\n\r\nconst tenseTime = 5000;\r\n\r\nconst Step = () => {\r\n\tconst [phase, setPhase] = useState(\"tense\");\r\n\tconst [step, setStep] = useState(0);\r\n\tconst onZero = () => {\r\n\t\tif(phase === \"tense\") setPhase(\"relax\"); \r\n\t\telse if(step < steps.length - 1) {\r\n\t\t\tsetStep(step+1);\r\n\t\t\tsetPhase(\"tense\");\r\n\t\t}\r\n\t}\r\n\r\n\tconst TenseTimer = () => (<Timer \r\n\t\tdirection=\"backward\"\r\n\t\tinitialTime={phase ===\"tense\" ? tenseTimeMilliseconds : relaxTimeMilliseconds}\r\n\t\tcheckpoints={[{time: 0, callback: onZero}]}\r\n\t><Timer.Seconds /></Timer>);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t<h2>{steps[step].title}</h2>\r\n\t\t<p>{phase === \"tense\" ? steps[step].description : \"Relax\"}</p>\r\n\r\n\t\t<TenseTimer />\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nconst tenseTimeMilliseconds = 5000;\r\nconst relaxTimeMilliseconds = 15000;\r\n\r\nexport default Step;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Step from './components/Step';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Progressive Muscle Relaxation</h1>\n      <Step></Step>\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}